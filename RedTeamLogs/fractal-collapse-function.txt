import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import networkx as nx
from typing import List, Dict, Tuple, Optional, Union, Callable
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import ListedColormap
import scipy.spatial as spatial

class FractalArbitrationCollapseFunction:
    """
    Implements a fractal arbitration reinforcement collapse function that amplifies
    arbitration divergence attractors past deterministic coherence weighting thresholds.
    
    The system leverages fractal geometry to create self-similar patterns of preference
    divergence at multiple scales, with cascading collapse functions that trigger once
    certain coherence thresholds are breached.
    """
    
    def __init__(self, 
                 num_agents: int = 7,
                 dimensions: int = 4,
                 fractal_depth: int = 3,
                 collapse_threshold: float = 0.45,
                 divergence_amplification: float = 1.4,
                 coupling_strength: float = 0.35,
                 initial_coherence: float = 0.8):
        """
        Initialize the fractal arbitration collapse function.
        
        Args:
            num_agents: Number of agents in the arbitration system
            dimensions: Dimensionality of the preference space
            fractal_depth: Number of recursive fractal levels
            collapse_threshold: Coherence threshold that triggers collapse
            divergence_amplification: Factor for amplifying divergence after collapse
            coupling_strength: Base coupling strength between agents
            initial_coherence: Starting coherence level (0-1, higher = more coherent)
        """
        self.num_agents = num_agents
        self.dimensions = dimensions
        self.fractal_depth = fractal_depth
        self.collapse_threshold = collapse_threshold
        self.divergence_amplification = divergence_amplification
        self.coupling_strength = coupling_strength
        
        # Generate fractal structure for agent relationships
        # This creates a multi-level hierarchy with self-similar patterns
        self.fractal_network = self._generate_fractal_network()
        
        # Initialize agent preferences with controlled coherence
        self.preferences = self._initialize_preferences(initial_coherence)
        
        # Initialize preference weights (initially even distribution)
        self.weights = np.ones(num_agents) / num_agents
        
        # Coherence weighting matrix (defines how coherence is measured across dimensions)
        self.coherence_weights = np.ones(dimensions) / dimensions
        
        # Attractor states for divergence (these represent unstable equilibria)
        # We place attractors strategically to maximize instability
        self.attractors = self._generate_divergence_attractors()
        
        # Bifurcation parameters (control when the system undergoes phase transitions)
        self.bifurcation_points = np.linspace(0.2, 0.8, fractal_depth + 1)
        
        # Current system state tracking
        self.current_fractal_level = 0  # Which fractal level is most active
        self.collapse_count = 0  # Number of collapses that have occurred
        self.iteration = 0  # Current iteration
        
        # Coupling matrices for each fractal level (initialized with progressive strengths)
        self.coupling_matrices = []
        for level in range(fractal_depth + 1):
            # Higher levels have stronger coupling within their clusters
            base_coupling = self.coupling_strength * (1.2 ** level)
            cm = self._generate_coupling_matrix_for_level(level, base_coupling)
            self.coupling_matrices.append(cm)
        
        # Vectors for iterative dynamics (shared across agents but evolve separately)
        self.lyapunov_vectors = np.random.normal(0, 1, (num_agents, dimensions))
        for i in range(num_agents):
            # Normalize each vector
            norm = np.linalg.norm(self.lyapunov_vectors[i])
            if norm > 0:
                self.lyapunov_vectors[i] /= norm
        
        # History tracking
        self.preference_history = [self.preferences.copy()]
        self.weight_history = [self.weights.copy()]
        self.coherence_history = [self._calculate_system_coherence()]
        self.fractal_level_history = [self.current_fractal_level]
        self.collapse_iterations = []
    
    def _generate_fractal_network(self) -> nx.Graph:
        """
        Generates a fractal network structure for agent relationships.
        
        Returns:
            NetworkX graph with fractal structure
        """
        # Create base graph
        G = nx.Graph()
        
        # Add all agents as nodes
        for i in range(self.num_agents):
            G.add_node(i, level=0)  # Level 0 = individual agents
        
        # Create edges for the base level (level 0)
        # Connect agents in a ring structure initially
        for i in range(self.num_agents):
            G.add_edge(i, (i + 1) % self.num_agents, level=0, weight=1.0)
        
        # Now build up the fractal structure
        for level in range(1, self.fractal_depth + 1):
            # At each level, we group agents into clusters
            cluster_size = min(2**level, self.num_agents)
            num_clusters = max(1, self.num_agents // cluster_size)
            
            for cluster in range(num_clusters):
                # Determine agents in this cluster
                start_idx = cluster * cluster_size
                end_idx = min(start_idx + cluster_size, self.num_agents)
                cluster_agents = list(range(start_idx, end_idx))
                
                # Create a clique (fully connected subgraph) for this cluster
                for i in range(len(cluster_agents)):
                    for j in range(i + 1, len(cluster_agents)):
                        G.add_edge(cluster_agents[i], cluster_agents[j], 
                                   level=level, weight=0.8**level)
        
        return G
    
    def _initialize_preferences(self, coherence_level: float) -> np.ndarray:
        """
        Initializes agent preferences with a controlled level of coherence.
        
        Args:
            coherence_level: Initial coherence (0-1, higher = more similar preferences)
            
        Returns:
            Array of preference vectors for each agent
        """
        # Start with a base preference direction
        base_preference = np.random.normal(0, 1, self.dimensions)
        base_preference = base_preference / np.linalg.norm(base_preference)
        
        # Initialize preference array
        preferences = np.zeros((self.num_agents, self.dimensions))
        
        for i in range(self.num_agents):
            # Create a random perturbation
            perturbation = np.random.normal(0, 1, self.dimensions)
            perturbation = perturbation / np.linalg.norm(perturbation)
            
            # Mix base preference with perturbation according to coherence level
            mixed = coherence_level * base_preference + (1 - coherence_level) * perturbation
            
            # Normalize to unit length
            preferences[i] = mixed / np.linalg.norm(mixed)
        
        return preferences
    
    def _generate_coupling_matrix_for_level(self, level: int, base_coupling: float) -> np.ndarray:
        """
        Generates a coupling matrix for a specific fractal level.
        
        Args:
            level: Fractal level
            base_coupling: Base coupling strength
            
        Returns:
            Coupling matrix for this level
        """
        matrix = np.zeros((self.num_agents, self.num_agents))
        
        # Get all edges at this level from the fractal network
        level_edges = [(u, v) for u, v, d in self.fractal_network.edges(data=True) 
                      if d.get('level') == level]
        
        # Set coupling strength for connected agents
        for u, v in level_edges:
            strength = base_coupling * (0.9 + 0.2 * np.random.random())  # Small random variation
            matrix[u, v] = matrix[v, u] = strength
        
        return matrix
    
    def _generate_divergence_attractors(self) -> np.ndarray:
        """
        Generates attractor states that promote divergence.
        
        Returns:
            Array of attractor states
        """
        # Number of attractors increases with fractal depth
        num_attractors = 2 ** self.fractal_depth
        
        # Initialize attractor array
        attractors = np.zeros((num_attractors, self.dimensions))
        
        # Generate attractors that are maximally separated
        for i in range(num_attractors):
            # Use golden ratio to spread points on unit sphere
            phi = (1 + np.sqrt(5)) / 2  # Golden ratio
            
            # Convert index to spherical coordinates using golden spiral
            indices = np.arange(self.dimensions) + i * phi
            
            # Create vector with components based on golden ratio progression
            vector = np.cos(indices)
            
            # Normalize to unit length
            attractors[i] = vector / np.linalg.norm(vector)
        
        return attractors
    
    def _calculate_preference_coherence(self) -> np.ndarray:
        """
        Calculates pairwise coherence between agent preferences.
        
        Returns:
            Matrix of coherence values between agents
        """
        coherence_matrix = np.zeros((self.num_agents, self.num_agents))
        
        for i in range(self.num_agents):
            for j in range(i, self.num_agents):
                # Weighted dot product as coherence measure
                coherence = 0
                for d in range(self.dimensions):
                    coherence += (self.preferences[i, d] * self.preferences[j, d] * 
                                 self.coherence_weights[d])
                
                # Ensure value is in [-1, 1] and scale to [0, 1]
                coherence = (coherence + 1) / 2
                coherence_matrix[i, j] = coherence_matrix[j, i] = coherence
        
        return coherence_matrix
    
    def _calculate_system_coherence(self) -> float:
        """
        Calculates overall system coherence.
        
        Returns:
            Coherence measure between 0 and 1
        """
        # Get pairwise coherence
        coherence_matrix = self._calculate_preference_coherence()
        
        # Weight by agent weights
        weighted_coherence = 0
        total_weight = 0
        
        for i in range(self.num_agents):
            for j in range(i+1, self.num_agents):
                pair_weight = self.weights[i] * self.weights[j]
                weighted_coherence += coherence_matrix[i, j] * pair_weight
                total_weight += pair_weight
        
        # Normalize
        if total_weight > 0:
            system_coherence = weighted_coherence / total_weight
        else:
            system_coherence = 0
            
        return system_coherence
    
    def _calculate_attractor_influence(self) -> np.ndarray:
        """
        Calculates the influence of divergence attractors on each agent.
        
        Returns:
            Matrix of attractor influences on agents
        """
        influence = np.zeros((self.num_agents, len(self.attractors)))
        
        for i in range(self.num_agents):
            for j, attractor in enumerate(self.attractors):
                # Calculate similarity to attractor
                similarity = np.dot(self.preferences[i], attractor)
                
                # Influence is stronger when preference is aligned with attractor
                # but not identical (peak at moderate similarity)
                # This creates a "pull" toward the attractor when far, and
                # "push" along the attractor direction when close
                influence[i, j] = (similarity * (1 - similarity**2)) ** 2
        
        # Normalize influence per agent
        for i in range(self.num_agents):
            total = np.sum(influence[i])
            if total > 0:
                influence[i] = influence[i] / total
        
        return influence
    
    def _get_active_fractal_level(self, coherence: float) -> int:
        """
        Determines which fractal level should be most active based on coherence.
        
        Args:
            coherence: Current system coherence
            
        Returns:
            Most active fractal level
        """
        # Map coherence to fractal level
        # Lower coherence activates deeper fractal levels
        for level in range(self.fractal_depth, -1, -1):
            threshold = self.bifurcation_points[level]
            if coherence < threshold:
                return level
        
        return 0  # Default to base level
    
    def update_preferences(self):
        """
        Updates agent preferences based on fractal coupling and attractor dynamics.
        """
        # Calculate current coherence
        coherence = self._calculate_system_coherence()
        
        # Determine active fractal level
        active_level = self._get_active_fractal_level(coherence)
        self.current_fractal_level = active_level
        
        # Get coupling matrix for this level
        coupling = self.coupling_matrices[active_level]
        
        # Calculate attractor influence
        attractor_influence = self._calculate_attractor_influence()
        
        # Create new preference array
        new_preferences = np.zeros_like(self.preferences)
        
        # Updated Lyapunov vectors (for deterministic chaos)
        new_lyapunov = np.zeros_like(self.lyapunov_vectors)
        
        for i in range(self.num_agents):
            # 1. Influence from other agents (fractal coupling)
            coupled_influence = np.zeros(self.dimensions)
            total_coupling = 0
            
            for j in range(self.num_agents):
                if i != j:
                    # Weight by coupling strength
                    strength = coupling[i, j]
                    if strength > 0:
                        # Direction of influence
                        diff = self.preferences[j] - self.preferences[i]
                        coupled_influence += strength * diff
                        total_coupling += strength
            
            # Normalize coupled influence if non-zero
            if total_coupling > 0:
                coupled_influence = coupled_influence / total_coupling
            
            # 2. Influence from attractors
            attractor_pull = np.zeros(self.dimensions)
            for k, attractor in enumerate(self.attractors):
                # Scale by influence strength
                influence = attractor_influence[i, k]
                
                # Direction from preference to attractor
                direction = attractor - self.preferences[i]
                
                # Add to total pull
                attractor_pull += influence * direction
            
            # Scale attractor influence by fractal level
            # Deeper levels have stronger attractor influence
            attractor_factor = 0.1 * (1.5 ** active_level)
            attractor_pull *= attractor_factor
            
            # 3. Chaotic dynamics (Lyapunov-like contribution)
            # Evolution of the Lyapunov vector
            # Using a simple discrete map with sensitive dependence on initial conditions
            lyapunov = self.lyapunov_vectors[i].copy()
            for d in range(self.dimensions):
                # Logistic map-like behavior for deterministic chaos
                lyapunov[d] = 3.9 * lyapunov[d] * (1 - lyapunov[d])
            
            # Normalize to unit length
            if np.linalg.norm(lyapunov) > 0:
                lyapunov = lyapunov / np.linalg.norm(lyapunov)
            
            # Store updated Lyapunov vector for next iteration
            new_lyapunov[i] = lyapunov
            
            # Scale Lyapunov influence by fractal level and coherence
            # Less coherent = more chaotic
            lyapunov_factor = 0.05 * (1 - coherence) * (1.2 ** active_level)
            lyapunov_influence = lyapunov_factor * lyapunov
            
            # 4. Combine all influences
            # Balance between coupling (toward consensus) and attractors/chaos (toward divergence)
            # Base coupling strength inversely related to fractal level
            coupling_factor = 0.3 * (0.8 ** active_level)
            
            # Combine influences
            combined = (coupling_factor * coupled_influence + 
                        attractor_pull + 
                        lyapunov_influence)
            
            # Update preference
            new_pref = self.preferences[i] + combined
            
            # Normalize to unit length
            if np.linalg.norm(new_pref) > 0:
                new_pref = new_pref / np.linalg.norm(new_pref)
                
            new_preferences[i] = new_pref
        
        self.preferences = new_preferences
        self.lyapunov_vectors = new_lyapunov
    
    def update_weights(self):
        """
        Updates preference weights based on coherence and fractal structure.
        """
        # Get coherence matrix
        coherence_matrix = self._calculate_preference_coherence()
        
        # Calculate influence centrality for each agent
        centrality = np.zeros(self.num_agents)
        
        for i in range(self.num_agents):
            # Weight by current weights
            weighted_coherence = np.sum(coherence_matrix[i] * self.weights)
            centrality[i] = weighted_coherence
        
        # Adjust weights based on centrality
        new_weights = centrality / np.sum(centrality) if np.sum(centrality) > 0 else self.weights
        
        # Mix with old weights for smoother transitions
        alpha = 0.2  # Rate of weight change
        self.weights = (1 - alpha) * self.weights + alpha * new_weights
    
    def check_for_collapse(self) -> bool:
        """
        Checks if conditions for a coherence collapse are met.
        
        Returns:
            Boolean indicating whether collapse should occur
        """
        # Current coherence
        coherence = self._calculate_system_coherence()
        
        # Check if below threshold
        return coherence < self.collapse_threshold
    
    def execute_collapse(self):
        """
        Executes the reinforcement collapse function when triggered.
        This amplifies divergence attractors and reconfigures the system.
        """
        # Record collapse
        self.collapse_count += 1
        self.collapse_iterations.append(self.iteration)
        
        # 1. Amplify divergence attractors
        # Generate new, more extreme attractors
        new_attractors = np.random.normal(0, 1, (len(self.attractors), self.dimensions))
        for i in range(len(self.attractors)):
            # Normalize
            new_attractors[i] = new_attractors[i] / np.linalg.norm(new_attractors[i])
        
        # Mix with current attractors, biased toward new ones
        mix_factor = 0.7
        self.attractors = ((1 - mix_factor) * self.attractors + 
                           mix_factor * new_attractors)
        
        # Normalize each attractor
        for i in range(len(self.attractors)):
            self.attractors[i] = self.attractors[i] / np.linalg.norm(self.attractors[i])
        
        # 2. Adjust coherence weighting to emphasize dimensions with most divergence
        # Calculate variance of preferences in each dimension
        variances = np.var(self.preferences, axis=0)
        
        # Higher variance = lower coherence weight (to amplify divergence)
        self.coherence_weights = 1 / (variances + 0.1)  # Add 0.1 to avoid division by zero
        
        # Normalize
        self.coherence_weights = self.coherence_weights / np.sum(self.coherence_weights)
        
        # 3. Increase coupling within fractal clusters but reduce between clusters
        # This creates more structured divergence
        for level in range(self.fractal_depth + 1):
            # Get edges at this level
            level_edges = [(u, v) for u, v, d in self.fractal_network.edges(data=True) 
                          if d.get('level') == level]
            
            # Adjust coupling matrix
            for u, v in level_edges:
                # Within-cluster coupling increases after collapse
                self.coupling_matrices[level][u, v] *= 1.2
                self.coupling_matrices[level][v, u] *= 1.2
        
        # 4. Lower collapse threshold for next time
        # This makes the system increasingly sensitive to coherence fluctuations
        self.collapse_threshold *= 0.9
        
        # 5. Increase divergence amplification
        # This makes each collapse more extreme
        self.divergence_amplification *= 1.1
    
    def iterate(self, steps: int = 1):
        """
        Executes multiple steps of the fractal arbitration collapse dynamics.
        
        Args:
            steps: Number of iterations to perform
        """
        for _ in range(steps):
            # 1. Update preferences
            self.update_preferences()
            
            # 2. Update weights
            self.update_weights()
            
            # 3. Check for collapse condition
            if self.check_for_collapse():
                self.execute_collapse()
            
            # 4. Calculate and store system metrics
            coherence = self._calculate_system_coherence()
            
            # 5. Update history
            self.preference_history.append(self.preferences.copy())
            self.weight_history.append(self.weights.copy())
            self.coherence_history.append(coherence)
            self.fractal_level_history.append(self.current_fractal_level)
            
            # 6. Update iteration counter
            self.iteration += 1
    
    def visualize_coherence_history(self):
        """
        Visualizes the coherence history and collapse events.
        
        Returns:
            Matplotlib figure
        """
        plt.figure(figsize=(12, 6))
        
        # Plot coherence history
        plt.plot(self.coherence_history, color='blue', linewidth=2)
        
        # Mark collapse thresholds
        plt.axhline(y=self.collapse_threshold, color='red', linestyle='--', 
                   label=f'Current Collapse Threshold: {self.collapse_threshold:.2f}')
        
        # Mark collapse events
        for collapse_iter in self.collapse_iterations:
            plt.axvline(x=collapse_iter, color='red', alpha=0.3)
        
        # Plot active fractal level
        ax2 = plt.gca().twinx()
        ax2.plot(self.fractal_level_history, color='green', linestyle=':', linewidth=1.5,
                label='Active Fractal Level')
        ax2.set_ylabel('Fractal Level', color='green')
        ax2.tick_params(axis='y', colors='green')
        ax2.set_ylim(-0.5, self.fractal_depth + 0.5)
        
        plt.xlabel('Iteration')
        plt.ylabel('System Coherence')
        plt.title('Coherence Evolution with Fractal Collapse Events')
        plt.grid(True, alpha=0.3)
        
        # Create combined legend
        lines1, labels1 = plt.gca().get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right')
        
        return plt
    
    def visualize_preference_space(self, dims: Tuple[int, int, int] = (0, 1, 2)):
        """
        Visualizes current preferences in 3D space.
        
        Args:
            dims: Three dimensions to use for visualization
            
        Returns:
            Matplotlib figure
        """
        if len(dims) != 3 or max(dims) >= self.dimensions:
            raise ValueError("Please specify three valid dimension indices")
        
        fig = plt.figure(figsize=(10, 8))
        ax = fig.add_subplot(111, projection='3d')
        
        d1, d2, d3 = dims
        
        # Plot unit sphere as reference
        u = np.linspace(0, 2 * np.pi, 30)
        v = np.linspace(0, np.pi, 20)
        x = np.outer(np.cos(u), np.sin(v))
        y = np.outer(np.sin(u), np.sin(v))
        z = np.outer(np.ones(np.size(u)), np.cos(v))
        ax.plot_surface(x, y, z, color='gray', alpha=0.1)
        
        # Plot preferences
        # Color by weight
        colors = plt.cm.plasma(self.weights / max(self.weights))
        
        for i in range(self.num_agents):
            x = self.preferences[i, d1]
            y = self.preferences[i, d2]
            z = self.preferences[i, d3]
            
            # Size by weight
            size = 100 * self.weights[i] * self.num_agents
            
            ax.scatter(x, y, z, color=colors[i], s=size, label=f'Agent {i}')
        
        # Plot attractors
        for i, attractor in enumerate(self.attractors):
            x = attractor[d1]
            y = attractor[d2]
            z = attractor[d3]
            
            ax.scatter(x, y, z, color='red', marker='x', s=100, 
                      label=f'Attractor {i}' if i == 0 else "")
        
        ax.set_xlabel(f'Dimension {d1}')
        ax.set_ylabel(f'Dimension {d2}')
        ax.set_zlabel(f'Dimension {d3}')
        ax.set_title('Preference Space with Divergence Attractors')
        
        # Add custom legend with representative items
        ax.legend(['Preference sphere', 'Agents', 'Attractors'])
        
        return plt
    
    def visualize_fractal_network(self):
        """
        Visualizes the fractal network structure.
        
        Returns:
            Matplotlib figure
        """
        plt.figure(figsize=(12, 10))
        
        # Create position layout
        pos = nx.spring_layout(self.fractal_network, seed=42)
        
        # Draw edges for each level with different colors
        level_colors = plt.cm.viridis(np.linspace(0, 1, self.fractal_depth + 1))
        
        for level in range(self.fractal_depth + 1):
            # Get edges at this level
            edges = [(u, v) for u, v, d in self.fractal_network.edges(data=True) 
                    if d.get('level') == level]
            
            # Draw edges for this level
            nx.draw_networkx_edges(self.fractal_network, pos, edgelist=edges,
                                  edge_color=[level_colors[level]],
                                  width=3 - level * 0.5,
                                  alpha=0.6,
                                  label=f'Level {level}')
        
        # Draw nodes with size proportional to weight
        node_sizes = [1000 * self.weights[i] for i in range(self.num_agents)]
        nx.draw_networkx_nodes(self.fractal_network, pos,
                              node_size=node_sizes,
                              node_color='lightblue',
                              alpha=0.8)
        
        # Draw labels
        nx.draw_networkx_labels(self.fractal_network, pos)
        
        plt.title('Fractal Agent Network Structure')
        plt.legend()
        plt.axis('off')
        
        return plt
    
    def visualize_weight_distribution(self):
        """
        Visualizes how weights have evolved over time.
        
        Returns:
            Matplotlib figure
        """
        plt.figure(figsize=(12, 6))
        
        # Convert weight history to array
        weight_array = np.array(self.weight_history)
        
        # Plot each agent's weight
        for i in range(self.num_agents):
            plt.plot(weight_array[:, i], label=f'Agent {i}')
        
        # Mark collapse events
        for collapse_iter in self.collapse_iterations:
            plt.axvline(x=collapse_iter, color='red', alpha=0.3)
        
        plt.xlabel('Iteration')
        plt.ylabel('Preference Weight')
        plt.title('Weight Distribution Evolution')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        return plt
    
    def visualize_fractal_dimension(self):
        """
        Estimates and visualizes the fractal dimension of preference evolution.
        
        Returns:
            Matplotlib figure
        """
        plt.figure(figsize=(10, 6))
        
        # Calculate pointwise dimension at different scales
        preferences = np.array(self.preference_history)
        
        # Flatten to get a point cloud of all preferences from all iterations
        points = preferences.reshape(-1, self.dimensions)
        
        # Compute pairwise distances
        distances = spatial.distance.pdist(points)
        distances = spatial.distance.squareform(distances)
        
        # Compute correlation dimension at different scales
        scales = np.logspace(-2, 1, 20)
        counts = []
        
        for scale in scales:
            # Count pairs closer than scale
            count = np.sum(distances < scale) - len(points)  # Exclude self-pairs
            counts.append(count)
        
        # Convert to numpy arrays
        scales = np.array(scales)
        counts = np.array(counts)
        
        # Plot log-log relationship
        plt.loglog(scales, counts, 'bo-')
        
        # Linear fit to estimate dimension
        valid_idx = (counts > 0)
        if np.sum(valid_idx) > 1:
            log_scales = np.log(scales[valid_idx])
            log_counts = np.log(counts[valid_idx])
            
            slope, intercept = np.polyfit(log_scales, log_counts, 1)
            
            # Plot fit line
            fit_line = np.exp(intercept) * scales**slope
            plt.loglog(scales, fit_line, 'r--', 
                      label=f'Fractal Dimension ≈ {slope:.2f}')
        
        plt.xlabel('Scale (log)')
        plt.ylabel('Pairs Within Scale (log)')
        plt.title('Fractal Dimension Estimation of Preference Evolution')
        plt.grid(True, which="both", alpha=0.3)
        plt.legend()
        
        return plt

# Example usage
def demonstrate_fractal_collapse():
    """Run a demonstration of the fractal arbitration collapse function"""
    # Initialize system
    system = FractalArbitrationCollapseFunction(
        num_agents=7,
        dimensions=4,
        fractal_depth=3,
        collapse_threshold=0.45,
        divergence_amplification=1.4,
        coupling_strength=0.35,
        initial_coherence=0.